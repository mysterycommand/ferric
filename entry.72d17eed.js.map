{"version":3,"sources":["../pkg/wasm-loader.js","../pkg/ferric.js","lib.rs","entry.ts"],"names":["isFetchable","value","URL","Request","isWasmInstance","WebAssembly","Instance","canInstantiateStreaming","instantiateStreaming","streamErrorMessage","join","instantiate","request","imports","then","response","arrayBuffer","bytes","instantiateRequest","catch","e","console","warn","instantiateModule","module","result","instance","load","wasm","fetch","__wbindgen_wasm_module","exports","run","cachedTextDecoder","TextDecoder","ignoreBOM","fatal","decode","cachegetUint8Memory","getUint8Memory","buffer","memory","Uint8Array","getStringFromWasm","ptr","len","subarray","heap","Array","fill","undefined","push","heap_next","length","addHeapObject","obj","idx","getObject","dropObject","takeObject","ret","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","encodeString","encodeInto","arg","view","buf","encode","set","read","written","passStringToWasm","__wbindgen_malloc","mem","offset","code","charCodeAt","slice","__wbindgen_realloc","cachegetInt32Memory","getInt32Memory","Int32Array","__wbindgen_string_new","arg0","arg1","__wbindgen_object_drop_ref","__wbg_new_59cb74e423758ede","Error","__wbg_stack_558ba5917b466edd","ret0","stack","ret1","__wbg_error_4bb6c2a97407129a","v0","__wbindgen_free","error","__widl_f_log_1_","log","__wbindgen_throw","init","wasmUrl","wasmExports","require"],"mappings":"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","file":"entry.72d17eed.js","sourceRoot":"../src","sourcesContent":["function isFetchable(value) {\n  return (\n    value instanceof URL ||\n    typeof value === 'string' ||\n    value instanceof Request\n  );\n}\n\nfunction isWasmInstance(value) {\n  return value instanceof WebAssembly.Instance;\n}\n\nconst canInstantiateStreaming =\n  typeof WebAssembly.instantiateStreaming === 'function';\n\nconst streamErrorMessage = [\n  '`WebAssembly.instantiateStreaming` failed. Assuming this is because your',\n  'server does not serve wasm with `application/wasm` MIME type. Falling back',\n  'to `WebAssembly.instantiate` which is slower. Original error:\\n',\n].join(' ');\n\nfunction instantiate(request, imports) {\n  return request\n    .then(response => response.arrayBuffer())\n    .then(bytes => WebAssembly.instantiate(bytes, imports));\n}\n\nfunction instantiateRequest(request, imports) {\n  return canInstantiateStreaming\n    ? WebAssembly.instantiateStreaming(request, imports).catch(e => {\n        console.warn(streamErrorMessage, e);\n        return instantiate(request, imports);\n      })\n    : instantiate(request, imports);\n}\n\nasync function instantiateModule(module, imports) {\n  const result = await WebAssembly.instantiate(module, imports);\n  return isWasmInstance(result) ? { instance: result, module } : result;\n}\n\nexport async function load(wasm, imports) {\n  const { instance, module } = await (isFetchable(wasm)\n    ? instantiateRequest(fetch(wasm), imports)\n    : instantiateModule(wasm, imports));\n\n  load.__wbindgen_wasm_module = module;\n  return instance.exports;\n}\n","import { load } from './wasm-loader.js';\nlet wasm;\n\n/**\n*/\nexport function run() {\n    wasm.run();\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory = null;\nfunction getUint8Memory() {\n    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory;\n}\n\nfunction getStringFromWasm(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n\nconst heap = new Array(32);\n\nheap.fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm(arg) {\n\n    let len = arg.length;\n    let ptr = wasm.__wbindgen_malloc(len);\n\n    const mem = getUint8Memory();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = wasm.__wbindgen_realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachegetInt32Memory = null;\nfunction getInt32Memory() {\n    if (cachegetInt32Memory === null || cachegetInt32Memory.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory;\n}\n\nexport const __wbindgen_string_new = function(arg0, arg1) {\n    const ret = getStringFromWasm(arg0, arg1);\n    return addHeapObject(ret);\n};\n\nexport const __wbindgen_object_drop_ref = function(arg0) {\n    takeObject(arg0);\n};\n\nexport const __wbg_new_59cb74e423758ede = function() {\n    const ret = new Error();\n    return addHeapObject(ret);\n};\n\nexport const __wbg_stack_558ba5917b466edd = function(arg0, arg1) {\n    const ret = getObject(arg1).stack;\n    const ret0 = passStringToWasm(ret);\n    const ret1 = WASM_VECTOR_LEN;\n    getInt32Memory()[arg0 / 4 + 0] = ret0;\n    getInt32Memory()[arg0 / 4 + 1] = ret1;\n};\n\nexport const __wbg_error_4bb6c2a97407129a = function(arg0, arg1) {\n    const v0 = getStringFromWasm(arg0, arg1).slice();\n    wasm.__wbindgen_free(arg0, arg1 * 1);\n    console.error(v0);\n};\n\nexport const __widl_f_log_1_ = function(arg0) {\n    console.log(getObject(arg0));\n};\n\nexport const __wbindgen_throw = function(arg0, arg1) {\n    throw new Error(getStringFromWasm(arg0, arg1));\n};\n\n\nexport default function init(wasmUrl) {\n  return load(wasmUrl, {\n    ['./ferric.js']: {\n      __wbindgen_string_new,\n      __wbindgen_object_drop_ref,\n      __wbg_new_59cb74e423758ede,\n      __wbg_stack_558ba5917b466edd,\n      __wbg_error_4bb6c2a97407129a,\n      __widl_f_log_1_,\n      __wbindgen_throw\n    }\n  }).then(wasmExports => {\n    wasm = wasmExports;\n    return {\n      run\n    }\n  });\n}\n","import init from '../pkg/ferric.js';\nmodule.exports = init(require('../pkg/ferric_bg.wasm'));\n","import { run } from './lib.rs';\nimport './style.css';\n\nrun();\n"]}